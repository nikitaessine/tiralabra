import unittest
from dead_end_filling import DeadEndFilling

import unittest

class TestDeadEndFilling(unittest.TestCase):

    def setUp(self):
        self.DEF = DeadEndFilling()
    
    def test_naapurit(self):
        naapurit = self.DEF.naapurit(1, 1)
        self.assertEqual(naapurit, [(0, 1),(2, 1),(1, 2)])
    
    def test_dead_endit(self):
        self.DEF.dead_endit()
        self.assertEqual(self.DEF.labyrintti[0][4], '#')
    
    def test_seinien_laitto(self):
        self.DEF.seinien_laitto(1, 1)
        self.assertEqual(self.DEF.labyrintti[0][4], '#')
    
    def test_loppu_tulos(self):
        self.DEF.dead_endit()

        lopputulos = self.DEF.labyrintti

        self.assertEqual(lopputulos, [['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '#', '#', '#'], 
                                      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.'], 
                                      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']])
